{"ast":null,"code":"var _jsxFileName = \"/Users/Pati/Desktop/Studia/UG/Semestr4/devops/devops/myfrontend/src/MyForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyForm = props => {\n  _s();\n\n  const [flowers, setFlowers] = useState([]);\n  const [id, setId] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [flower, setFlower] = useState(\"\");\n\n  const handlePostSubmit = event => {\n    console.log(`Flower to save ${name}`);\n    event.preventDefault();\n    axios.post('http://127.0.0.1:4000/flower', {\n      name: name\n    }).then(response => console.log(response)).catch(error => console.log(error));\n  };\n\n  const handleGetSubmit = event => {\n    console.log(`Flower id to get ${id}`);\n    axios.get('http://127.0.0.1:4000/flower/' + id).then(response => {\n      console.log(response);\n      setFlower(response.data);\n    }).catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:4000/flowers').then(response => setFlowers(response.data)).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Post a flower:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: event => setName(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      onClick: handlePostSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 78\n    }, this), \"Get a flower:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: id,\n      onChange: event => setId(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      onClick: handleGetSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 77\n    }, this), \"Your result:   \", flower, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), \" List of \", props.noFlowers, \" flowers \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 57\n      }, this), flowers.slice(0, props.noFlowers).map(flower => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: flower.name\n      }, flower.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 37\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyForm, \"wOjLPrRM0Czg15CxUAdwI5lQFDU=\");\n\n_c = MyForm;\nexport default MyForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyForm\");","map":{"version":3,"sources":["/Users/Pati/Desktop/Studia/UG/Semestr4/devops/devops/myfrontend/src/MyForm.js"],"names":["React","useState","useEffect","axios","MyForm","props","flowers","setFlowers","id","setId","name","setName","flower","setFlower","handlePostSubmit","event","console","log","preventDefault","post","then","response","catch","error","handleGetSubmit","get","data","target","value","noFlowers","slice","map"],"mappings":";;;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AAEtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,EAAD,EAAKC,KAAL,IAAcR,QAAQ,CAAC,CAAD,CAA5B;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMa,gBAAgB,GAAIC,KAAD,IAAW;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBP,IAAK,EAAnC;AACAK,IAAAA,KAAK,CAACG,cAAN;AACAf,IAAAA,KAAK,CAACgB,IAAN,CAAW,8BAAX,EACI;AACIT,MAAAA,IAAI,EAAEA;AADV,KADJ,EAIKU,IAJL,CAIUC,QAAQ,IAAIL,OAAO,CAACC,GAAR,CAAYI,QAAZ,CAJtB,EAKKC,KALL,CAKWC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CALpB;AAMH,GATD;;AAWA,QAAMC,eAAe,GAAIT,KAAD,IAAW;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBT,EAAG,EAAnC;AACAL,IAAAA,KAAK,CAACsB,GAAN,CAAU,kCAAkCjB,EAA5C,EACKY,IADL,CACUC,QAAQ,IAAI;AAACL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAAuBR,MAAAA,SAAS,CAACQ,QAAQ,CAACK,IAAV,CAAT;AAA0B,KADxE,EAEKJ,KAFL,CAEWC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAFpB;AAGH,GALD;;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACsB,GAAN,CAAU,+BAAV,EACKL,IADL,CACUC,QAAQ,IAAId,UAAU,CAACc,QAAQ,CAACK,IAAV,CADhC,EAEKJ,KAFL,CAEWC,KAAK,IAAIP,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAFpB;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACI;AAAA,8CAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEb,IAA1B;AAAgC,MAAA,QAAQ,EAAEK,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAACY,MAAN,CAAaC,KAAd;AAA1D;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAoC,MAAA,OAAO,EAAEd;AAA7C;AAAA;AAAA;AAAA;AAAA,YAJJ,oBAIqE;AAAA;AAAA;AAAA;AAAA,YAJrE,gCAOI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEN,EAA1B;AAA8B,MAAA,QAAQ,EAAEO,KAAK,IAAIN,KAAK,CAACM,KAAK,CAACY,MAAN,CAAaC,KAAd;AAAtD;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAoC,MAAA,OAAO,EAAEJ;AAA7C;AAAA;AAAA;AAAA;AAAA,YARJ,oBAQoE;AAAA;AAAA;AAAA;AAAA,YARpE,qBASoBZ,MATpB,eAWI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA,cADJ,eACmBP,KAAK,CAACwB,SADzB,4BAC4C;AAAA;AAAA;AAAA;AAAA,cAD5C,EAEKvB,OAAO,CACHwB,KADJ,CACU,CADV,EACazB,KAAK,CAACwB,SADnB,EAEIE,GAFJ,CAEQnB,MAAM,iBAAK;AAAA,kBAAsBA,MAAM,CAACF;AAA7B,SAAUE,MAAM,CAACJ,EAAjB;AAAA;AAAA;AAAA;AAAA,cAFnB,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA,kBADJ;AAqBH,CApDD;;GAAMJ,M;;KAAAA,M;AAsDN,eAAeA,MAAf","sourcesContent":["\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst MyForm = (props) => {\n\n    const [flowers, setFlowers] = useState([]);\n    const [id, setId] = useState(0);\n    const [name, setName] = useState(\"\");\n    const [flower, setFlower] = useState(\"\");\n\n    const handlePostSubmit = (event) => {\n        console.log(`Flower to save ${name}`);\n        event.preventDefault();\n        axios.post('http://127.0.0.1:4000/flower', \n            {\n                name: name,\n            })\n            .then(response => console.log(response))\n            .catch(error => console.log(error));\n    };\n\n    const handleGetSubmit = (event) => {\n        console.log(`Flower id to get ${id}`);\n        axios.get('http://127.0.0.1:4000/flower/' + id)\n            .then(response => {console.log(response); setFlower(response.data);})\n            .catch(error => console.log(error));\n    };\n\n    useEffect(() => {\n        axios.get('http://127.0.0.1:4000/flowers')\n            .then(response => setFlowers(response.data))\n            .catch(error => console.log(error));\n    }, []);\n\n    return (\n        <>\n            \n            Post a flower:\n            <input type='text' value={name} onChange={event => setName(event.target.value)}/>\n            <input type='submit' value='Submit' onClick={handlePostSubmit}/> <br/>\n\n            Get a flower:\n            <input type='text' value={id} onChange={event => setId(event.target.value)}/>\n            <input type='submit' value='Submit' onClick={handleGetSubmit}/> <br/>\n            Your result:   {flower}\n\n            <div>\n                <br/> List of {props.noFlowers} flowers <br/> \n                {flowers\n                    .slice(0, props.noFlowers)\n                    .map(flower => (<div key={flower.id}>{flower.name}</div>))}\n            </div>\n        </>\n    );\n\n};\n\nexport default MyForm;"]},"metadata":{},"sourceType":"module"}